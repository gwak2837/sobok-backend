type Bucket {
  creationTime: DateTime!
  id: ID!
  modificationTime: DateTime!
  name: NonEmptyString!
  type: BucketType!

  """
  버킷 소유자
  """
  user: User!
  userId: ID!
}

enum BucketType {
  MENU
  STORE
}

type Comment {
  contents: [NonEmptyString!]!
  creationTime: DateTime!

  """
  이 댓글이 달린 피드
  """
  feed: Feed!
  id: ID!
  imageUrl: URL
  modificationTime: DateTime!

  """
  이 댓글의 상위 댓글
  """
  parentComment: Comment

  """
  댓글을 작성한 사용자
  """
  user: User!
}

scalar Date

scalar DateTime

scalar EmailAddress

type Feed {
  commentCount: Int!
  contents: [NonEmptyString!]!
  creationTime: DateTime!

  """
  피드에 달린 해시태그
  """
  hashtags: [NonEmptyString!]
  id: ID!
  imageUrls: [URL!]!

  """
  피드 좋아요 여부 (로그인 필요)
  """
  isLiked: Boolean!
  likeCount: Int!
  modificationTime: DateTime!
  rating: NonEmptyString!

  """
  피드에 태그된 매장
  """
  store: Store!
  storeId: ID!

  """
  피드 작성자
  """
  user: User!
  userId: ID!
}

"""
기본값: 모든 사용자
"""
enum FeedOptions {
  """
  로그인 필요
  """
  FOLLOWING_USER
  STAR_USER
}

input FeedOrder {
  by: FeedOrderBy
  direction: OrderDirection
}

"""
기본값: id
"""
enum FeedOrderBy {
  CREATION_TIME
}

"""
성별
"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

scalar JWT

scalar Latitude

scalar Longitude

type Menu {
  category: NonEmptyString!
  creationTime: DateTime!

  """
  메뉴에 달린 해시태그
  """
  hashtags: [NonEmptyString!]
  id: ID!
  imageUrls: [URL!]!

  """
  로그인한 사용자가 이 메뉴를 버킷에 담은 여부
  """
  isInBucket: Boolean!

  """
  로그인한 사용자가 이 메뉴를 좋아하는 여부
  """
  isLiked: Boolean!
  isSoldOut: Boolean!
  modificationTime: DateTime!
  name: NonEmptyString!
  price: Int!

  """
  이 메뉴를 판매하는 매장
  """
  store: Store!
  storeId: ID!
}

input MenuOrder {
  by: MenuOrderBy
  direction: OrderDirection
}

"""
기본값: id
"""
enum MenuOrderBy {
  NAME
  PRICE
}

type Mutation {
  """
  고유 이름 또는 이메일과 비밀번호를 전송하면 JWT 인증 토큰을 반환함
  """
  login(passwordHash: NonEmptyString!, uniqueNameOrEmail: NonEmptyString!): UserAuthentication

  """
  JWT 인증 토큰과 같이 요청하면 로그아웃 성공 여부를 반환함
  """
  logout: Boolean!

  """
  회원가입에 필요한 정보를 주면 성공했을 때 인증 토큰을 반환함
  """
  register(input: RegisterInput!): UserAuthentication

  """
  회원탈퇴 시 사용자 정보가 모두 초기화됩
  """
  unregister: Boolean!
}

type News {
  category: NonEmptyString!
  contents: [NonEmptyString!]!
  creationTime: DateTime!
  id: ID!
  imageUrls: [URL!]

  """
  뉴스 좋아요 여부 (로그인 필요)
  """
  isLiked: Boolean!
  modificationTime: DateTime!

  """
  이 소식을 올린 매장
  """
  store: Store!
  storeId: ID!
  title: NonEmptyString!
}

"""
기본값: ALL_STORE
"""
enum NewsOptions {
  ALL_STORE

  """
  로그인 필요
  """
  LIKED_STORE
}

scalar NonEmptyString

"""
기본값: 내림차순
"""
enum OrderDirection {
  ASC
}

input Pagination {
  lastId: ID
  lastValue: NonEmptyString
  limit: PositiveInt!
}

scalar PositiveInt

"""
OAuth 공급자
"""
enum Provider {
  GOOGLE
  KAKAO
  NAVER
  SOBOK
}

type Query {
  """
  버켓 상세 정보
  """
  bucket(id: ID!): Bucket

  """
  메뉴 또는 매장 버킷 리스트를 반환, 로그인 상태 또는 userId를 입력해야 함
  """
  buckets(type: BucketType!, userUniqueName: NonEmptyString): [Bucket!]

  """
  피드에 달린 댓글
  """
  comments: [Comment!]

  """
  특정 게시글에 달린 댓글
  """
  commentsByFeed(feedId: ID!): [Comment]

  """
  피드 상세
  """
  feed(id: ID!): Feed

  """
  특정 매장 피드 목록
  """
  feedListByStore(storeId: ID!): [Feed!]

  """
  특정 동네 피드 목록
  """
  feedListByTown(option: FeedOptions, town: NonEmptyString): [Feed!]

  """
  이메일 중복 여부 검사
  """
  isEmailUnique(email: EmailAddress!): Boolean!

  """
  사용자 고유 이름 중복 여부 검사
  """
  isUniqueNameUnique(uniqueName: NonEmptyString!): Boolean!

  """
  좋아요 누른 댓글
  """
  likedComments: [Comment!]

  """
  좋아요 누른 피드
  """
  likedFeed: [Feed!]

  """
  좋아요 누른 메뉴
  """
  likedMenus: [Menu!]

  """
  좋아요 누른 소식
  """
  likedNews: [News!]

  """
  좋아요 누른 매장
  """
  likedStores: [Store!]

  """
  좋아요 누른 트렌드
  """
  likedTrends: [Trend!]

  """
  인증 토큰과 같이 요청하면 사용자 정보를 반환
  """
  me: User!

  """
  메뉴 상세
  """
  menu(id: ID!): Menu

  """
  메뉴 상세
  """
  menuByName(name: NonEmptyString!, storeId: ID!): Menu

  """
  피드에 태그된 메뉴 목록
  """
  menus: [Menu!]

  """
  특정 매장 메뉴 목록
  """
  menusByStore(storeId: ID!): [Menu!]

  """
  특정 동네 및 특정 카테고리 피드 목록
  """
  menusByTownAndCategory(
    """
    기본값: 전체
    """
    category: NonEmptyString
    order: MenuOrder
    pagination: Pagination!

    """
    기본값: 전국
    """
    town: NonEmptyString
  ): [Menu!]

  """
  메뉴 버킷에서 메뉴 가져오기
  """
  menusInBucket(bucketId: ID!, userUniqueName: NonEmptyString!): [Menu!]

  """
  내가 쓴 댓글
  """
  myComments: [Comment!]

  """
  나를 따르는 다른 사용자
  """
  myFollowers: [User!]

  """
  내가 따르고 있는 다른 사용자
  """
  myFollowings: [User!]

  """
  내 메뉴 버킷 리스트
  """
  myMenuBuckets: [Bucket!]

  """
  내 매장 버킷 리스트
  """
  myStoreBuckets: [Bucket!]

  """
  내가 소유한 매장
  """
  myStores: [Store!]

  """
  내가 쓴 피드
  """
  myfeed: [Feed!]

  """
  소식 상세
  """
  news(id: ID!): News

  """
  특정 매장 소식 목록
  """
  newsListByStore(categories: [NonEmptyString!], storeId: ID!): [News!]

  """
  옵션별 여러 매장 소식 목록
  """
  newsListByTown(categories: [NonEmptyString!], option: NewsOptions, town: NonEmptyString): [News!]

  """
  해시태그로 메뉴 검색
  """
  searchFeedList(hashtags: [NonEmptyString!]!, order: FeedOrder, pagination: Pagination!): [Feed!]

  """
  해시태그로 메뉴 검색
  """
  searchMenus(hashtags: [NonEmptyString!]!, order: MenuOrder, pagination: Pagination!): [Menu!]

  """
  해시태그로 매장 검색
  """
  searchStores(hashtags: [NonEmptyString!]!, order: StoreOrder, pagination: Pagination!): [Store!]

  """
  특정 매장 정보
  """
  store(id: ID!): Store

  """
  특정 매장 정보
  """
  storeInfo(id: ID!): Store

  """
  동네 및 카테고리별 매장 목록
  """
  storesByTownAndCategory(
    """
    기본값: 전체
    """
    categories: [NonEmptyString!]
    order: StoreOrder
    pagination: Pagination!

    """
    기본값: 전국
    """
    town: NonEmptyString
  ): [Store!]

  """
  매장 버킷에만 해당
  """
  storesInBucket(bucketId: ID!, userUniqueName: NonEmptyString!): [Store!]

  """
  대댓글
  """
  subComments(id: ID!): [Comment]
}

input RegisterInput {
  bio: String
  birth: Date
  email: EmailAddress!
  gender: Gender!
  imageUrl: URL
  name: NonEmptyString!
  passwordHash: NonEmptyString!
  phone: NonEmptyString!
  uniqueName: NonEmptyString!
}

type Store {
  address: NonEmptyString!
  businessHours: [NonEmptyString!]
  categories: [NonEmptyString!]!
  creationTime: DateTime!
  description: String

  """
  매장에 달린 해시태그
  """
  hashtags: [NonEmptyString!]
  holidays: [Date!]
  id: ID!
  imageUrls: [URL!]

  """
  로그인한 사용자가 이 매장을 버킷에 담은 여부
  """
  isInBucket: Boolean!

  """
  로그인한 사용자가 이 매장을 좋아하는 여부
  """
  isLiked: Boolean!
  latitude: Latitude!
  longitude: Longitude!
  modificationTime: DateTime!
  name: NonEmptyString!
  registrationNumber: String
  tel: String
  town: NonEmptyString!

  """
  매장을 소유한 사용자 정보
  """
  user: User
  userId: ID!
}

input StoreOrder {
  by: StoreOrderBy
  direction: OrderDirection
}

"""
기본값: id
"""
enum StoreOrderBy {
  NAME
}

type Trend {
  contents: [NonEmptyString!]!
  creationTime: DateTime!
  id: ID!
  modificationTime: DateTime!

  """
  트렌드 작성자
  """
  user: User!
}

scalar URL

scalar UUID

type User {
  bio: String
  birth: Date
  creationTime: DateTime!
  email: EmailAddress!
  feedCount: Int!
  followerCount: Int!
  followingCount: Int!
  gender: Gender!
  id: UUID!
  imageUrl: URL
  isEmailVerified: Boolean!
  isStarUser: Boolean!
  modificationTime: DateTime!
  name: NonEmptyString!
  nickname: String
  phone: NonEmptyString!
  providers: [Provider!]!
  uniqueName: NonEmptyString!
}

type UserAuthentication {
  jwt: JWT!
  userUniqueName: NonEmptyString!
}
