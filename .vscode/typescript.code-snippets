{
  "ORM": {
    "prefix": "orm",
    "body": [
      "import { ${TM_DIRECTORY/.*\\/(.*)$/${1:/capitalize}/g} } from '../generated/graphql'",
      "import { camelToSnake, snakeKeyToCamelKey } from '../../utils/commons'",
      "",
      "// All GraphQL fields -> Database columns",
      "export function ${TM_DIRECTORY/.*\\/(.*)$/$1/g}FieldColumnMapping(${TM_DIRECTORY/.*\\/(.*)$/$1/g}Field: keyof ${TM_DIRECTORY/.*\\/(.*)$/${1:/capitalize}/g}) {",
      "  switch (${TM_DIRECTORY/.*\\/(.*)$/$1/g}Field) {",
      "    default:",
      "      return camelToSnake(${TM_DIRECTORY/.*\\/(.*)$/$1/g}Field)",
      "  }",
      "}",
      "",
      "// All database columns -> GraphQL fields",
      "export function ${TM_DIRECTORY/.*\\/(.*)$/$1/g}ORM(${TM_DIRECTORY/.*\\/(.*)$/$1/g}: Record<string, any>) {",
      "  return {",
      "    ...snakeKeyToCamelKey(${TM_DIRECTORY/.*\\/(.*)$/$1/g}),",
      "  }",
      "}",
      ""
    ],
    "description": "GraphQL Object Relation Mapping"
  },
  "Query": {
    "prefix": "query",
    "body": [
      "import format from 'pg-format'",
      "import { QueryResolvers } from 'src/graphql/generated/graphql'",
      "import { importSQL } from '../../utils/commons'",
      "import { poolQuery } from '../../database/postgres'",
      "import { selectColumnFromField } from '../../utils/ORM'",
      "",
      "const $1 = importSQL(__dirname, 'sql/$1.sql')",
      "",
      "export const Query: QueryResolvers = {",
      "  $1: async (_, __, { user }, info) => {",
      "    const columns = selectColumnFromField(info, $2FieldColumnMapping)",
      "    ",
      "    const { rows } = await poolQuery(format(await $1, columns))",
      "    ",
      "    return rows.map((row) => $2ORM(row))",
      "  },",
      "}",
      ""
    ],
    "description": "GraphQL Query Resolver"
  }
}
